# -*- coding: utf-8 -*-

from collections import OrderedDict
import numpy as np


class CFS(object):

    def __init__(self):

        self.cfs_version = 2
        self.file_size = 0
        self.filename = ""
        self.comment = ""
        self.created = None

        self.channels = OrderedDict()
        self.filevars = {}
        self.dsvars = {}
        self.frames = []

    def __repr__(self):
        s = "CFS({0} channels, {1} frames)"
        return s.format(self.num_chans, self.num_frames)

    def add_file_variable(self, name, unit):
        self.filevars[name] = unit

    def add_frame_variable(self, name, unit):
        self.dsvars[name] = unit

    def add_channel(self, name, x_unit, y_unit):
        self.channels[name] = {'x_unit': x_unit, 'y_unit': y_unit}

    def add_frame(self, frame):
        self.frames.append(frame)

    @property
    def num_chans(self):
        return len(self.channels)

    @property
    def num_filevars(self):
        return len(self.filevars)
    
    @property
    def num_dsvars(self):
        return len(self.dsvars)

    @property
    def num_frames(self):
        return len(self.frames)


class FileVarSet(object):
    
    def __init__(self):
        self._values = OrderedDict()
        self._units = OrderedDict()

    def __repr__(self):
        s = "FileVariableSet()"
        return ""
    
    def names(self):
        return self._vars.keys()

    def add_variable(self, name, v, unit):
        self._values[name] = v
        self._units[name] = unit


class FileVar(object):

    def __init__(self, name, val, unit):
        self.name = name
        self.value = val
        self.unit = unit if len(unit) else ""

    def __repr__(self):
        s = "FileVar('{0}': {1})"
        val = str(self.value) + self.unit
        return s.format(self.name, val)


class Frame(object):
    """A frame of data (i.e. data section) from a recording.

    According to the CFS spec these are called "data sections", but for CFS
    files generated by signal these correspond to frames of data.
    
    """
    def __init__(self):
        self.vars = OrderedDict()
        self.channels = []
        self.sample_rates = {}
        self.data = {}

    def __repr__(self):
        s = "Frame(chans={0}, vars={1})"
        return s.format(len(self.data), len(self.vars))

    def add_variable(self, name, v):
        self.vars[name] = v

    def add_channel(self, name, rate, data):
        self.channels.append(name)
        self.sample_rates[name] = float(str(rate))
        self.data[name] = data
